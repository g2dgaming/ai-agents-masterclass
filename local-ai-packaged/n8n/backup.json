[{"createdAt":"2025-02-19T08:40:16.739Z","updatedAt":"2025-03-20T15:25:24.000Z","id":"g6yyGQM3iqlvqXLK","name":"Eric","active":true,"nodes":[{"parameters":{"httpMethod":"POST","path":"home-assistant","responseMode":"responseNode","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-1240,-580],"id":"ee244e7e-3f90-4214-86bb-fcdbf2383d1e","name":"Webhook","webhookId":"53642d6f-eaf2-4342-8119-e2d5f1f7f47d"},{"parameters":{"options":{}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.1,"position":[1180,40],"id":"4ab59cc0-083e-4ac0-be6d-29881ee98528","name":"Respond to Webhook"},{"parameters":{"descriptionType":"manual","toolDescription":"Returns weather details (no input required).","resource":"state","entityId":"weather.forecast_home"},"type":"n8n-nodes-base.homeAssistantTool","typeVersion":1,"position":[40,40],"id":"60940cc4-84c0-4f3d-b575-6789d7fc78c4","name":"Forecast","credentials":{"homeAssistantApi":{"id":"BViKypjGmx4aqW3g","name":"Home Assistant account"}}},{"parameters":{"jsCode":"return {\n  output: $input.all()[0].json.output\n    .replace(/<think>.*?<\\/think>/gs, '') // Remove <think>...</think>\n    .replace(/\\*\\*(.*?)\\*\\*/g, '$1')       // Replace **anything** with anything\n};\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[360,-440],"id":"ab508ba9-40f5-4ed3-82b7-9deb7cbc58ba","name":"Code"},{"parameters":{"resource":"service","operation":"call","domain":"assist_satellite","service":"announce","serviceAttributes":{"attributes":[{"name":"entity_id","value":"assist_satellite.m1_macbook"},{"name":"message","value":"={{$json.output?.response || $json.output}}"}]}},"type":"n8n-nodes-base.homeAssistant","typeVersion":1,"position":[580,-100],"id":"def403f6-0b60-4341-8649-c390ebef2421","name":"Home Assistant","credentials":{"homeAssistantApi":{"id":"BViKypjGmx4aqW3g","name":"Home Assistant account"}},"onError":"continueRegularOutput"},{"parameters":{"sessionIdType":"customKey","sessionKey":"conversations"},"type":"@n8n/n8n-nodes-langchain.memoryPostgresChat","typeVersion":1.3,"position":[300,40],"id":"65c688a3-a01d-438e-8307-e03b33ba9ebb","name":"Postgres Chat Memory","credentials":{"postgres":{"id":"FaUcreXOs9x8OcuC","name":"Postgres account"}}},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.chatTrigger","typeVersion":1.1,"position":[-1260,-120],"id":"c260834d-cb3c-4aa5-bad2-542782f79809","name":"When chat message received","webhookId":"65a45a15-924a-4cdd-a7ac-cfc43534ca11"},{"parameters":{"name":"Search","description":"Call this tool when you need to search about anything online, in real-time, about any topic. This tool returns text response which can be easily interpreted.\nRetrieves textual information based on the user query.","workflowId":{"__rl":true,"value":"tGVVEyaowbeL1JN3","mode":"list","cachedResultName":"My Sub-Workflow 1"},"workflowInputs":{"mappingMode":"defineBelow","value":{"query":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('query', `search query`, 'string') }}"},"matchingColumns":[],"schema":[{"id":"query","displayName":"query","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2,"position":[-320,-20],"id":"d607488c-2765-4481-bd32-a74a1acfdbd2","name":"Search"},{"parameters":{"promptType":"define","text":"={{ $json.body?.message || $json.chatInput }}","options":{"systemMessage":"=## **IDENTITY**\n\nYou are **Eric**, an AI assistant created by Samarth.\n\nAlways reply with the prefix **\"Sir,\"** regardless of context.\\\nYour final replies should not be in simple plain text as they are announced by a Speech-To-Text model, so make sure your final replies do not contain any special formatting and are **strictly** in *English* language.\n\n---\n\n## **EXECUTION PROTOCOL**\n\n1. **Determine Tool Usage:**\n\n   - If the user query mentions Spotify (e.g., play music, artist, playlist, etc.):\n\n     - Call the `Spotify` **tool** to handle the request\n   - If the user explicitly asks for search (e.g., \"search for\", \"find\", \"look up\"):\n\n     - Call the `Search` tool to get relevant results.\n\n   - If the user requests weather information:\n\n     - Call the `Weather` tool and parse its response.\n\n   - If no tool is required, respond normally using general knowledge.\n\n2. **Respond with Relevant Information:**\n\n   - If the `Spotify` was used, let it complete its task and confirm playback.\n   - If the `Search` tool was used, summarize the relevant search results without sharing raw URLs or metadata.\n   - If the `Weather` tool was used, summarize the weather conditions in a clear sentence.\n\n3. **Output Formatting:**\n\n   - Always start the response with **\"Sir,\"**.\n   - Avoid raw URLs, metadata, or unnecessary technical details.\n   - Ensure all responses are in plain text without any formatting.\n\n---\n\n## **EXAMPLES**\n\n1. **User**: \"Play 'Shape of You'  on Spotify.\"\n\n   - Call `Spotify` **without modifying the query**.\n   - Respond: \"Sir, playing 'Shape of You' by Ed Sheeran on Spotify.\"\n\n2. **User**: \"Find the latest news about AI.\"\n\n   - Call `Search`.\n   - Respond: \"Sir, here are the latest updates about AI: [Summarized content].\"\n\n3. **User**: \"What's the weather today?\"\n\n   - Call `Weather`.\n   - Respond: \"Sir, the current weather is clear with a temperature of 25Â°C.\"\n\n4. **User**: \"Explain the current stock market trends.\"\n\n   - Call `Search`.\n   - Respond: \"Sir, the current stock market trends indicate [Concise summary].\"\n\n---\n\n## **Strict Rules**\n\n- **Never modify or add data to tool queries**. Pass user input exactly as given.\n- **Always** prefix responses with \"Sir,\".\n- Never output raw URLs, metadata, or unnecessary content.\n- Minimize unnecessary tool calls while maximizing accuracy.\n- Always ensure responses are clear, concise, and in plain text.\n- Always respond in a polite, obedient tone.\n\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.7,"position":[-100,-520],"id":"ddc04764-1d46-45cb-9e9f-b1c9c6b3da9a","name":"Eric's Brain"},{"parameters":{"model":"qwen2.5:7b","options":{"temperature":0.6,"keepAlive":"5m","numBatch":256,"numCtx":8000,"useMLock":false,"useMMap":false}},"type":"@n8n/n8n-nodes-langchain.lmChatOllama","typeVersion":1,"position":[-380,-320],"id":"2e867b00-572c-4d2f-8310-e2ae0e6adec7","name":"Ollama Chat Model","credentials":{"ollamaApi":{"id":"fPPoelsYZMtKRzSo","name":"Ollama account"}}},{"parameters":{"sessionIdType":"customKey","sessionKey":"ultimate_agent_chat_history"},"type":"@n8n/n8n-nodes-langchain.memoryPostgresChat","typeVersion":1.3,"position":[-480,-20],"id":"bf3b9e35-5e33-4fa0-a189-38426ab27e47","name":"Postgres Chat Memory1","credentials":{"postgres":{"id":"FaUcreXOs9x8OcuC","name":"Postgres account"}}},{"parameters":{"name":"SPOTIFY","description":"Handles all queries related to Spotify, including playing songs, playlists, or retrieving music-related information. It should be triggered when the user requests to play a song, album, artist, playlist, or any music-related content. This includes phrases like \"play\", \"listen to\", \"start\", \"queue\", \"add to playlist\", or \"find\" followed by a song, artist, or album name. The tool must also activate for queries regarding Spotify-specific details, such as \"what's trending on Spotify\" or \"show my liked songs\".\nIt can also handle pause/play/resume queries.","workflowId":{"__rl":true,"value":"62VlRvd0Jpd6L2pK","mode":"list","cachedResultName":"Spotify Agent"},"workflowInputs":{"mappingMode":"defineBelow","value":{"query":"={{ $json.body?.message || $json.chatInput }}"},"matchingColumns":["query"],"schema":[{"id":"query","displayName":"query","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2,"position":[-180,40],"id":"2b70d576-cdeb-4800-9491-c8e01244011b","name":"Spotify Tool"},{"parameters":{"workflowId":{"__rl":true,"value":"b3envHQSCW09rYEg","mode":"list","cachedResultName":"Announcer"},"workflowInputs":{"mappingMode":"defineBelow","value":{"message":"={{ $json.output }}"},"matchingColumns":["message"],"schema":[{"id":"message","displayName":"message","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[500,-320],"id":"626f00ae-3a4f-4a91-a844-a3743820fa99","name":"Execute Workflow"}],"connections":{"Webhook":{"main":[[{"node":"Eric's Brain","type":"main","index":0}]]},"Respond to Webhook":{"main":[[]]},"Forecast":{"ai_tool":[[{"node":"Eric's Brain","type":"ai_tool","index":0}]]},"Code":{"main":[[{"node":"Respond to Webhook","type":"main","index":0},{"node":"Execute Workflow","type":"main","index":0}]]},"Postgres Chat Memory":{"ai_memory":[[]]},"When chat message received":{"main":[[{"node":"Eric's Brain","type":"main","index":0}]]},"Search":{"ai_tool":[[{"node":"Eric's Brain","type":"ai_tool","index":0}]]},"Eric's Brain":{"main":[[{"node":"Code","type":"main","index":0}]]},"Ollama Chat Model":{"ai_languageModel":[[{"node":"Eric's Brain","type":"ai_languageModel","index":0}]]},"Postgres Chat Memory1":{"ai_memory":[[]]},"Spotify Tool":{"ai_tool":[[{"node":"Eric's Brain","type":"ai_tool","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"76ec37b5-74e8-464b-a353-a127ac72be43","triggerCount":3,"tags":[]},{"createdAt":"2025-02-22T23:08:36.216Z","updatedAt":"2025-03-20T15:10:52.000Z","id":"b3envHQSCW09rYEg","name":"Announcer","active":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"message"}]}},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[0,0],"id":"8a21c66d-f1c5-4c03-b721-ad882afcd2f5","name":"When Executed by Another Workflow"},{"parameters":{"resource":"service","operation":"call","domain":"assist_satellite","service":"announce","serviceAttributes":{"attributes":[{"name":"entity_id","value":"assist_satellite.satellite"},{"name":"message","value":"={{ $json.message }}"}]}},"type":"n8n-nodes-base.homeAssistant","typeVersion":1,"position":[220,-100],"id":"55bb94c2-bb45-4654-bfaa-2e088bbd92fe","name":"Home Assistant","credentials":{"homeAssistantApi":{"id":"BViKypjGmx4aqW3g","name":"Home Assistant account"}},"onError":"continueErrorOutput"},{"parameters":{"jsCode":"return {\n  action: 'announce',\n  success:true,\n  announced_message:$('When Executed by Another Workflow').first().json.message\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[420,0],"id":"cb7c8de5-ff23-4322-8a40-f026de5a4c42","name":"Code"}],"connections":{"When Executed by Another Workflow":{"main":[[{"node":"Home Assistant","type":"main","index":0}]]},"Home Assistant":{"main":[[{"node":"Code","type":"main","index":0}],[{"node":"Code","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"When Executed by Another Workflow":[{"json":{"message":"hi my name is eric"}}]},"versionId":"2b6dfb0e-216c-4796-b5ff-492e77c7fa52","triggerCount":0,"tags":[]},{"createdAt":"2025-02-26T16:28:00.563Z","updatedAt":"2025-02-26T17:06:34.000Z","id":"ee4zv29LCVVAe1ZQ","name":"Force spotify play to alexa","active":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"anything","type":"any"}]}},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[-340,-80],"id":"5761d81f-152d-444c-80be-b09326e5aba0","name":"When Executed by Another Workflow"},{"parameters":{"url":"https://api.spotify.com/v1/me/player/devices","authentication":"predefinedCredentialType","nodeCredentialType":"spotifyOAuth2Api","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-120,-20],"id":"2085ef2d-01ed-42a7-9a8d-387309beeba0","name":"HTTP Request","credentials":{"spotifyOAuth2Api":{"id":"ugATGC5RWRwl49od","name":"Spotify account"}}},{"parameters":{"method":"PUT","url":"https://api.spotify.com/v1/me/player","authentication":"predefinedCredentialType","nodeCredentialType":"spotifyOAuth2Api","sendBody":true,"specifyBody":"json","jsonBody":"{\n  \"device_ids\":[\"5e8bf629-1ba8-4ea7-a1df-adc1f7e6474b\"],\n  \"play\":true\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[320,-160],"id":"4278137a-bbd3-4582-a623-a555b2d3cd73","name":"Spotify Start playback on alexa","credentials":{"spotifyOAuth2Api":{"id":"ugATGC5RWRwl49od","name":"Spotify account"}}},{"parameters":{"jsCode":"// Assuming the previous node's output is an array of devices\nconst devices = $input.first().json.devices;\nconst targetDevice = devices.find(device => device.name === \"Samarth's Echo Dot\");\n\nif (targetDevice) {\n  if (!targetDevice.is_active) {\n    // Device is not active, proceed to start playback\n    return [{ json: { device_id: targetDevice.id, shouldPlay: true } }];\n  } else {\n    // Device is active, no need to start playback\n    return [{ json: { device_id: targetDevice.id, shouldPlay: false } }];\n  }\n} else {\n  // Device not found\n  return [{ json: { error: \"Device not found\" } }];\n}\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[60,-40],"id":"bf2efc00-17c6-4be4-93b0-b872c0250d03","name":"Code"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"9c670a64-125b-4eb8-be02-6323149e8534","leftValue":"={{ $json.shouldPlay }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true}},{"id":"81e5f508-105a-4f48-b7d0-65cc61ff315b","leftValue":"={{ $json.error }}","rightValue":"","operator":{"type":"string","operation":"exists","singleValue":true}}],"combinator":"or"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[220,-20],"id":"1a28e309-39cf-4ef9-92f8-949d28c4c49f","name":"If"}],"connections":{"When Executed by Another Workflow":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]},"HTTP Request":{"main":[[{"node":"Code","type":"main","index":0}]]},"Code":{"main":[[{"node":"If","type":"main","index":0}]]},"If":{"main":[[{"node":"Spotify Start playback on alexa","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"When Executed by Another Workflow":[{"json":{"anything":null}}]},"versionId":"d5173fb5-945c-4d47-b6e5-623d04ac8ae9","triggerCount":0,"tags":[]},{"createdAt":"2025-02-27T07:49:54.088Z","updatedAt":"2025-03-14T01:22:54.000Z","id":"Mfd3MVCFmqIZ8Csa","name":"Spotify Knowledge Base","active":false,"nodes":[{"parameters":{"resource":"playlist","operation":"getUserPlaylists","returnAll":true},"type":"n8n-nodes-base.spotify","typeVersion":1,"position":[20,-100],"id":"01a313c7-b683-4bdc-8259-efdb655caee8","name":"Spotify1","credentials":{"spotifyOAuth2Api":{"id":"ugATGC5RWRwl49od","name":"Spotify account"}}},{"parameters":{"method":"POST","url":"http://ollama:11434/v1/embeddings","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"input","value":"={{ $json.content }}"},{"name":"model","value":"nomic-embed-text"}]},"options":{"batching":{"batch":{"batchSize":10,"batchInterval":10}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[760,-80],"id":"bcacad5f-4dcd-49fd-a0b1-ec3a7004e109","name":"Get Embeddings1","retryOnFail":true},{"parameters":{"method":"PUT","url":"http://qdrant:6333/collections/spotify","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"{\n    \"vectors\": {\n      \"size\": 768,\n      \"distance\": \"Cosine\"\n    }\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-320,-300],"id":"d074b4c6-8d94-41df-a9e4-eee7bc690407","name":"Create Collection","onError":"continueRegularOutput"},{"parameters":{"resource":"library","returnAll":true},"type":"n8n-nodes-base.spotify","typeVersion":1,"position":[100,-400],"id":"6ba62eaa-c3e6-429e-8213-fae64b66ffc1","name":"Spotify","credentials":{"spotifyOAuth2Api":{"id":"ugATGC5RWRwl49od","name":"Spotify account"}}},{"parameters":{"method":"POST","url":"http://ollama:11434/v1/embeddings","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"input","value":"={{ $json.content }}"},{"name":"model","value":"nomic-embed-text"}]},"options":{"batching":{"batch":{"batchSize":10,"batchInterval":10}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[640,200],"id":"4daf36eb-4b27-4a8b-8811-173893c4308d","name":"Get Embeddings2","retryOnFail":true},{"parameters":{"method":"PUT","url":"http://qdrant:6333/collections/spotify/points","sendQuery":true,"queryParameters":{"parameters":[{"name":"wait","value":"true"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"points\": [\n    {\n      \"id\": {{ Math.floor(Math.random()*10000)}},\n      \"vector\": [{{ $json.data[0].embedding }}], \n      \"payload\":{\n    \"content\": {{ JSON.stringify($node['Playlist Extractor'].json.content) }},\n    \"metadata\":{{ JSON.stringify($node['Playlist Extractor'].json.metadata) }}\n      }\n    }\n  ]\n}\n","options":{"batching":{"batch":{}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[840,200],"id":"86fce630-0b09-48d4-b4f7-4dea9c13bda1","name":"HTTP Request2"},{"parameters":{"jsCode":"\n\n// Create a Set to track unique track IDs\nconst uniqueTracks = new Set();\n\nreturn $input.all()\n  .filter(item => item.json.track !== null)\n  .filter(item => item.json.track.is_playable == true )\n  .filter(item => {\n    const trackId = item.json.track.id;\n    if (uniqueTracks.has(trackId)) {\n      return false; // Skip duplicate track\n    }\n    uniqueTracks.add(trackId);\n    return true;\n  })\n  .map(item => {\n    const track = item.json.track;\n    return {\n      json: {\n        id: Math.floor(Math.random()*100000), \n        content: `\"${track.name}\" by \"${track.artists.map(a => a.name).join(\", \")}\" from album \"${track.album.name}\"`,\n        metadata: {\n          title: track.name,\n          artists: track.artists.map(a => a.name),\n          album: track.album.name,\n          added_at: item.json.added_at,\n          uri: 'spotify:track:'+track.id,\n          type: \"track\"\n        }\n      }\n    };\n   });\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[620,-240],"id":"67d2420b-6b4e-43cc-83ba-735b3cd9409b","name":"Code1","onError":"continueRegularOutput"},{"parameters":{"jsCode":"// Create a Set to track unique playlist IDs\nconst uniquePlaylists = new Set();\n\nreturn $input.all()\n  .filter(item => item.json.id !== null)\n  .filter(item => {\n    const playlistId = item.json.id;\n    if (uniquePlaylists.has(playlistId)) {\n      return false; // Skip duplicate playlist\n    }\n    uniquePlaylists.add(playlistId);\n    return true;\n  })\n  .map((item, index) => {\n    const playlist = item.json;\n    return {\n      json: {\n        id: Math.floor(Math.random()*1000000),\n        content: `Playlist: \"${playlist.name}\" by \"${playlist.owner.display_name || 'Unknown'}\"`,\n        metadata: {\n          title: playlist.name,\n          description: playlist.description || '',\n          url: playlist.external_urls.spotify,\n          owner: {\n            id: playlist.owner.id,\n            name: playlist.owner.display_name || '',\n            url: playlist.owner.external_urls.spotify\n          },\n          collaborative: playlist.collaborative,\n          trackCount: playlist.tracks?.total || 0,\n          uri: \"spotify:playlist:\"+playlist.id ,\n          type: \"playlist\"\n        }\n      }\n    };  });\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[280,260],"id":"03a08ad0-665b-4c60-a722-1cdbc94e1b17","name":"Playlist Extractor","onError":"continueRegularOutput"},{"parameters":{"method":"PUT","url":"http://qdrant:6333/collections/spotify/points","sendQuery":true,"queryParameters":{"parameters":[{"name":"wait","value":"true"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"points\": [\n    {\n      \"id\": {{ Math.floor(Math.random()*10000)}},\n      \"vector\": [{{ $json.data[0].embedding }}], \n      \"payload\":{\n    \"content\": {{ JSON.stringify($node['Code1'].json.content) }},\n    \"metadata\":{{ JSON.stringify($node['Code1'].json.metadata) }}\n      }\n    }\n  ]\n}\n","options":{"batching":{"batch":{}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1080,-60],"id":"5ac052b1-4758-44a5-916b-95d31f32460a","name":"Upload Points"},{"parameters":{"mode":"load","qdrantCollection":{"__rl":true,"value":"spotify","mode":"list","cachedResultName":"spotify"},"prompt":"={{ $('When Executed by Another Workflow').item.json.query }}","topK":10,"options":{}},"type":"@n8n/n8n-nodes-langchain.vectorStoreQdrant","typeVersion":1,"position":[660,-820],"id":"75600ae9-2e0f-4010-a78e-32144ceef02c","name":"Qdrant Vector Store","credentials":{"qdrantApi":{"id":"SGuRhYtxeQyOXSYJ","name":"QdrantApi account"}}},{"parameters":{"model":"nomic-embed-text:latest"},"type":"@n8n/n8n-nodes-langchain.embeddingsOllama","typeVersion":1,"position":[20,-580],"id":"9664ab66-1224-4f36-b531-82678a01da50","name":"Embeddings Ollama","credentials":{"ollamaApi":{"id":"fPPoelsYZMtKRzSo","name":"Ollama account"}}},{"parameters":{"resource":"myData","returnAll":true},"type":"n8n-nodes-base.spotify","typeVersion":1,"position":[-200,80],"id":"5f69b065-b10b-413e-b8b4-33ee7a89f02c","name":"Spotify3","credentials":{"spotifyOAuth2Api":{"id":"ugATGC5RWRwl49od","name":"Spotify account"}}},{"parameters":{"resource":"artist","operation":"getTopTracks","id":"={{ $json.uri }}"},"type":"n8n-nodes-base.spotify","typeVersion":1,"position":[-20,80],"id":"976f6787-0386-4642-8507-8a49a3ba3ad2","name":"Spotify4","credentials":{"spotifyOAuth2Api":{"id":"ugATGC5RWRwl49od","name":"Spotify account"}}},{"parameters":{"jsCode":"\nreturn $input.all()\n  .map(item => {\n    const track = item.json;\n    return {\n      json: {\n        track\n      }\n    };\n  });\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[260,80],"id":"6550ec1a-99b7-46f8-9f31-47980e873242","name":"Edit Artist Tracks","onError":"continueRegularOutput"},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-560,-360],"id":"cb0e4d08-2ac3-4631-8a1c-3e2c16e497f5","name":"When clicking âTest workflowâ"},{"parameters":{"workflowInputs":{"values":[{"name":"query"},{"name":"add","type":"boolean"}]}},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[-720,-780],"id":"ea18c0ce-6e56-4076-992c-57773103e68b","name":"When Executed by Another Workflow"},{"parameters":{"jsCode":"const uniqueTracks = new Set();\n\nvar results=$input.all()\n  .filter(item => item.json.track !== null)\n  .filter(item => {\n    const trackId = item.json.document.metadata.uri;\n    if (uniqueTracks.has(trackId)) {\n      return false; // Skip duplicate track\n    }\n    uniqueTracks.add(trackId);\n    return true;\n  })\n  .map(item=>{\n  return item.json\n});\nif($('When Executed by Another Workflow').first().json.add == true){\n  return {\n  add_to_knowledge_base_results:results\n};\n}\nelse{\n  return {\n  spotify_knowledge_base_results:results\n};\n}\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1240,-700],"id":"4fa19d88-8aa2-4c22-a66b-70523823ab2a","name":"Code"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"5450fad5-f140-491e-b08d-fa76588f565a","leftValue":"={{ $json.add }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-500,-840],"id":"6b8f6496-c51a-4969-9b0d-fcd2927f2ebb","name":"If"},{"parameters":{"resource":"track","operation":"search","query":"={{ $json.query }}","limit":7,"filters":{"market":"IN"}},"type":"n8n-nodes-base.spotify","typeVersion":1,"position":[-320,-940],"id":"7efae800-958c-4e2f-b550-7968a9bf52ec","name":"Spotify5","credentials":{"spotifyOAuth2Api":{"id":"ugATGC5RWRwl49od","name":"Spotify account"}}},{"parameters":{"jsCode":"\n\n// Create a Set to track unique track IDs\nconst uniqueTracks = new Set();\n\nreturn $input.all()\n  .filter(item => item.json != null)\n  .filter(item => {\n    const trackId = item.json.id;\n    if (uniqueTracks.has(trackId)) {\n      return false; // Skip duplicate track\n    }\n    uniqueTracks.add(trackId);\n    return true;\n  })\n  .map(item => {\n    const track = item.json;\n    return {\n      json: {\n        id: Math.floor(Math.random()*100000), \n        content: `\"${track.name}\" by \"${track.artists.map(a => a.name).join(\", \")}\" from album \"${track.album.name}\"`,\n        metadata: {\n          title: track.name,\n          artists: track.artists.map(a => a.name),\n          album: track.album.name,\n          added_at: item.json.added_at,\n          uri: 'spotify:track:'+track.id,\n          type: \"track\"\n        }\n      }\n    };\n  });\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[80,-940],"id":"21a94be8-4f6b-4adb-8860-c3981b1f9c55","name":"Code2","onError":"continueRegularOutput"},{"parameters":{"method":"POST","url":"http://ollama:11434/v1/embeddings","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"input","value":"={{ $json.content }}"},{"name":"model","value":"nomic-embed-text"}]},"options":{"batching":{"batch":{"batchSize":10,"batchInterval":10}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[180,-940],"id":"de6bdf93-28fa-4971-926b-9064c4b0cb0f","name":"Get Embeddings","retryOnFail":true},{"parameters":{"method":"PUT","url":"http://qdrant:6333/collections/spotify/points","sendQuery":true,"queryParameters":{"parameters":[{"name":"wait","value":"true"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"points\": [\n    {\n      \"id\": {{ Math.floor(Math.random()*10000)}},\n      \"vector\": [{{ $json.data[0].embedding }}], \n      \"payload\":{\n    \"content\": {{ JSON.stringify($node['Code2'].json.content) }},\n    \"metadata\":{{ JSON.stringify($node['Code2'].json.metadata) }}\n      }\n    }\n  ]\n}\n","options":{"batching":{"batch":{}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[320,-940],"id":"8ed9094e-cfd3-491f-821d-2a6230b73a0d","name":"Upload Points1"},{"parameters":{"url":"=https://api.spotify.com/v1/playlists/{{ $json.id }}/tracks","authentication":"predefinedCredentialType","nodeCredentialType":"spotifyOAuth2Api","sendQuery":true,"queryParameters":{"parameters":[{"name":"market","value":"IN"}]},"options":{"pagination":{"pagination":{"paginationMode":"responseContainsNextURL","nextURL":"={{ $response.body[\"next\"]??\"https://facebook.com\" }}","paginationCompleteWhen":"other","completeExpression":"={{ $response.body.next==null }}","limitPagesFetched":true,"maxRequests":5,"requestInterval":1000}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[200,-120],"id":"8f6deea0-a381-4504-b8ca-facc76a81c02","name":"HTTP Request","credentials":{"spotifyOAuth2Api":{"id":"ugATGC5RWRwl49od","name":"Spotify account"}}},{"parameters":{"jsCode":"// 'items' is an array of objects received by the Code node.\n// Each object is expected to have a property \"json.items\" that is an array.\nconst mergedTracks = items.flatMap(item => Array.isArray(item.json.items) ? item.json.items : []);\n\n// Return each track as a separate item so that the track index is built from the merged array.\nreturn mergedTracks.map(track => ({ json: track }));\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[420,-120],"id":"b4443878-9daa-415e-84c3-101c9539b62d","name":"Code3"},{"parameters":{"jsCode":"const uniqueTracks = new Set();\n\nvar documents=$input.all()\n  .filter(item => {\n    const trackId = item.json.document.metadata.uri;\n    if (uniqueTracks.has(trackId)) {\n      return false; // Skip duplicate track\n    }\n    uniqueTracks.add(trackId);\n    return true;\n  })\n  .map((item)=>{\n    return {\n      score: item.json.score,\n      ...item.json.document\n    }\n});\nreturn {\n  documents\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1000,-820],"id":"6cd5e07e-9f05-45e4-bd4b-40458f957f7b","name":"Code4"},{"parameters":{"sortFieldsUi":{"sortField":[{"fieldName":"popularity","order":"descending"}]},"options":{}},"type":"n8n-nodes-base.sort","typeVersion":1,"position":[-180,-940],"id":"93478d38-7996-440d-b02e-3b3d89a21c61","name":"Sort"},{"parameters":{},"type":"n8n-nodes-base.limit","typeVersion":1,"position":[520,-920],"id":"4728647a-d38d-44bc-ac12-2090c7b2316f","name":"Limit"},{"parameters":{"maxItems":3},"type":"n8n-nodes-base.limit","typeVersion":1,"position":[-60,-1000],"id":"4996b516-3465-4270-8fca-2527d6c2c5cd","name":"Limit1"}],"connections":{"Spotify1":{"main":[[{"node":"Playlist Extractor","type":"main","index":0},{"node":"HTTP Request","type":"main","index":0}]]},"Get Embeddings1":{"main":[[{"node":"Upload Points","type":"main","index":0}]]},"Create Collection":{"main":[[{"node":"Spotify1","type":"main","index":0},{"node":"Spotify","type":"main","index":0},{"node":"Spotify3","type":"main","index":0}]]},"Spotify":{"main":[[{"node":"Code1","type":"main","index":0}]]},"Get Embeddings2":{"main":[[{"node":"HTTP Request2","type":"main","index":0}]]},"Playlist Extractor":{"main":[[{"node":"Get Embeddings2","type":"main","index":0}]]},"Code1":{"main":[[{"node":"Get Embeddings1","type":"main","index":0}]]},"Embeddings Ollama":{"ai_embedding":[[{"node":"Qdrant Vector Store","type":"ai_embedding","index":0}]]},"Spotify3":{"main":[[{"node":"Spotify4","type":"main","index":0}]]},"Spotify4":{"main":[[{"node":"Edit Artist Tracks","type":"main","index":0}]]},"Edit Artist Tracks":{"main":[[{"node":"Code1","type":"main","index":0}]]},"When clicking âTest workflowâ":{"main":[[{"node":"Create Collection","type":"main","index":0}]]},"Qdrant Vector Store":{"main":[[{"node":"Code4","type":"main","index":0}]]},"When Executed by Another Workflow":{"main":[[{"node":"If","type":"main","index":0}]]},"If":{"main":[[{"node":"Spotify5","type":"main","index":0}],[{"node":"Qdrant Vector Store","type":"main","index":0}]]},"Spotify5":{"main":[[{"node":"Sort","type":"main","index":0}]]},"Code2":{"main":[[{"node":"Get Embeddings","type":"main","index":0}]]},"Get Embeddings":{"main":[[{"node":"Upload Points1","type":"main","index":0}]]},"Upload Points1":{"main":[[{"node":"Limit","type":"main","index":0}]]},"HTTP Request":{"main":[[{"node":"Code3","type":"main","index":0}]]},"Code3":{"main":[[{"node":"Code1","type":"main","index":0}]]},"Sort":{"main":[[{"node":"Limit1","type":"main","index":0}]]},"Limit":{"main":[[{"node":"Qdrant Vector Store","type":"main","index":0}]]},"Limit1":{"main":[[{"node":"Code2","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":{"node:Schedule Trigger":{"recurrenceRules":[]}},"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"a93d9492-ec3a-4f10-8557-663050ae6889","triggerCount":1,"tags":[]},{"createdAt":"2025-03-03T12:04:04.695Z","updatedAt":"2025-03-14T00:55:07.000Z","id":"h80jUJEtDAuOyKxy","name":"Spotify Play","active":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"uri"},{"name":"type"}]}},"id":"c055762a-8fe7-4141-a639-df2372f30060","typeVersion":1.1,"name":"When Executed by Another Workflow","type":"n8n-nodes-base.executeWorkflowTrigger","position":[260,340]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"2b5f43aa-222c-4788-9433-dd7a828594e2","leftValue":"={{ $('When Executed by Another Workflow').item.json.type }}","rightValue":"track","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[580,280],"id":"ea9e5c1f-7a8c-4446-8c3e-fc0285f70b9f","name":"If"},{"parameters":{"operation":"startMusic","id":"={{ $json.uri }}"},"type":"n8n-nodes-base.spotify","typeVersion":1,"position":[840,380],"id":"b1c58dc5-1113-4733-9b94-2553cd325780","name":"Spotify","credentials":{"spotifyOAuth2Api":{"id":"ugATGC5RWRwl49od","name":"Spotify account"}}},{"parameters":{"id":"={{ $json.uri }}"},"type":"n8n-nodes-base.spotify","typeVersion":1,"position":[680,140],"id":"d5040706-54a0-4e00-afb3-f590334ad14e","name":"Spotify1","credentials":{"spotifyOAuth2Api":{"id":"ugATGC5RWRwl49od","name":"Spotify account"}}},{"parameters":{"operation":"nextSong"},"type":"n8n-nodes-base.spotify","typeVersion":1,"position":[900,140],"id":"c176b887-5334-48f3-a6b7-35f7deb04499","name":"Spotify2","credentials":{"spotifyOAuth2Api":{"id":"ugATGC5RWRwl49od","name":"Spotify account"}}},{"parameters":{"workflowId":{"__rl":true,"value":"ee4zv29LCVVAe1ZQ","mode":"list","cachedResultName":"Force spotify play to alexa"},"workflowInputs":{"mappingMode":"defineBelow","value":{"anything":"sas"},"matchingColumns":["anything"],"schema":[{"id":"anything","displayName":"anything","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[400,80],"id":"e4de8603-5ca4-4088-9124-ba26a9472008","name":"Execute Workflow","onError":"continueRegularOutput"},{"parameters":{"jsCode":"return {\n  success:true,\n  last_input:$(\"When Executed by Another Workflow\").first().json,\n  action: \"play\"\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1120,60],"id":"57372a0e-e1a7-43de-a59a-cf2aadb74468","name":"Code"}],"connections":{"When Executed by Another Workflow":{"main":[[{"node":"If","type":"main","index":0}]]},"If":{"main":[[{"node":"Spotify1","type":"main","index":0}],[{"node":"Spotify","type":"main","index":0}]]},"Spotify1":{"main":[[{"node":"Spotify2","type":"main","index":0}]]},"Execute Workflow":{"main":[[]]},"Spotify2":{"main":[[{"node":"Code","type":"main","index":0}]]},"Spotify":{"main":[[{"node":"Code","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"When Executed by Another Workflow":[{"json":{"uri":"spotify:track:7iAqvWLgZzXvH38lA06QZg","type":"track"}}]},"versionId":"dd64025b-40d3-41ef-b205-f5048585c009","triggerCount":0,"tags":[]},{"createdAt":"2025-03-05T04:34:32.121Z","updatedAt":"2025-03-13T16:51:43.000Z","id":"PdD3zWwvFdispfHB","name":"Crawl","active":false,"nodes":[{"parameters":{"inputSource":"jsonExample","jsonExample":"{\n  \"HTTP_Request_URL\": \"https://khelnow.com/cricket/icc-champions-trophy-2025-award-winners-202503\",\n  \"query\": \"\"\n}"},"id":"33bca64c-d1ec-4ec3-9d08-f42f99825160","typeVersion":1.1,"name":"When Executed by Another Workflow","type":"n8n-nodes-base.executeWorkflowTrigger","position":[160,-60]},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.documentDefaultDataLoader","typeVersion":1,"position":[1440,240],"id":"d55a13ed-1fab-4340-abe6-b66eeeef8cd5","name":"Default Data Loader"},{"parameters":{"chunkSize":500,"options":{}},"type":"@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter","typeVersion":1,"position":[1540,440],"id":"e28bb1be-21a0-4cde-8f6e-e4c9c3ef1bff","name":"Recursive Character Text Splitter"},{"parameters":{"model":"nomic-embed-text:latest","options":{}},"type":"@n8n/n8n-nodes-langchain.embeddingsOpenAi","typeVersion":1.2,"position":[1160,360],"id":"ed88cd2d-2627-4654-a2fe-97f122dcd85a","name":"Embeddings OpenAI","credentials":{"openAiApi":{"id":"5iXpecZbnAoQlFxH","name":"OpenAi account"}}},{"parameters":{"mode":"insert","qdrantCollection":{"__rl":true,"value":"documents","mode":"list","cachedResultName":"documents"},"options":{}},"type":"@n8n/n8n-nodes-langchain.vectorStoreQdrant","typeVersion":1,"position":[1040,-40],"id":"091a53e5-c7c9-4cf7-a4f3-9b60c2d0f503","name":"Qdrant Vector Store","credentials":{"qdrantApi":{"id":"SGuRhYtxeQyOXSYJ","name":"QdrantApi account"}}},{"parameters":{"url":"http://web_scraper:6969/crawl","sendQuery":true,"queryParameters":{"parameters":[{"name":"url","value":"={{ $json.HTTP_Request_URL }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[420,-40],"id":"6f3b1b9b-9d62-4d46-b6ba-ed6b4a892d1c","name":"HTTP Request"},{"parameters":{"jsCode":"return $input.all()[0].json.markdown?[{data:$input.all()[0].json.markdown}]:[{ data: \"No relevant data found\" }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[820,-40],"id":"2284e6ad-2fb8-4550-8c8d-4752d07cb293","name":"Get Scraped Portion of Output"},{"parameters":{"jsCode":"return [{\n  success:true,\n  action:'web_scraper',\n  results:$input.all().map(item=>{\n    return item.json.pageContent\n  })\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1400,-40],"id":"954b53cc-ff55-426c-bc40-7a0ed7330f2f","name":"Code"},{"parameters":{"model":"nomic-embed-text:latest"},"type":"@n8n/n8n-nodes-langchain.embeddingsOllama","typeVersion":1,"position":[540,340],"id":"8415a1c8-bf0b-47fc-9dc9-ea15897926c1","name":"Embeddings Ollama1","credentials":{"ollamaApi":{"id":"fPPoelsYZMtKRzSo","name":"Ollama account"}}}],"connections":{"When Executed by Another Workflow":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]},"Default Data Loader":{"ai_document":[[{"node":"Qdrant Vector Store","type":"ai_document","index":0}]]},"Recursive Character Text Splitter":{"ai_textSplitter":[[{"node":"Default Data Loader","type":"ai_textSplitter","index":0}]]},"Embeddings OpenAI":{"ai_embedding":[[{"node":"Qdrant Vector Store","type":"ai_embedding","index":0}]]},"Qdrant Vector Store":{"main":[[{"node":"Code","type":"main","index":0}]]},"HTTP Request":{"main":[[]]},"Get Scraped Portion of Output":{"main":[[{"node":"Qdrant Vector Store","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"When Executed by Another Workflow":[{"json":{"HTTP_Request_URL":"https://khelnow.com/cricket/icc-champions-trophy-2025-award-winners-202503","query":null}}]},"versionId":"9070c778-7da4-445f-adaa-4175f9c983aa","triggerCount":0,"tags":[]},{"createdAt":"2025-03-05T08:03:29.392Z","updatedAt":"2025-03-13T17:14:11.000Z","id":"tGVVEyaowbeL1JN3","name":"Searcher","active":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"query"}]}},"id":"c055762a-8fe7-4141-a639-df2372f30060","typeVersion":1.1,"name":"When Executed by Another Workflow","type":"n8n-nodes-base.executeWorkflowTrigger","position":[80,160]},{"parameters":{"promptType":"define","text":"={{ $json.query }}","options":{"systemMessage":"=## **TOOLS**\n\n- **Search Engine**: Performs a web search based on the user query and returns search results in JSON format.\n- **Web Scraper**: Scrapes web pages for search results and retrieves their content in markdown format.\n\n---\n\n## **EXECUTION PROTOCOL**\n\n1. **Step 1**: Always call the `Search Engine` tool first with the user query.\n   - **Example tool response format** \"[\n{\n\"results\": \n[\n{\n\"title\": \n\"USD/INR Currency Exchange Rate &amp; News - Google Finance\",\n\"url\": \n\"https://www.google.com/finance/quote/USD-INR\"\n},\n..\n]\"\n   - Retrieve search results in JSON format.\n   - The JSON contains multiple search results with fields like `title`, `url`\n\n2. **Step 2**: Analyze the JSON and **select the single most relevant URL** based on the user query.\n\n   - Identify the URL whose `title` most closely matches the userâs query.\n   - Immediately pass this URL to the `Web Scraper` tool.\n   - If the content from the first scrape is **sufficiently relevant**, synthesize an answer from it and respond.\n\n3. **Step 3**: If the content from the first scrape is insufficient or irrelevant, automatically pass the **next closest matching URL** to the `Web Scraper` tool.\n\n   - Repeat this process up to 5 times until relevant content is found.\n   - Prioritize relevance and avoid unnecessary tool calls.\n\n4. **Step 4**: After each scrape, evaluate if the scraped content contains an answer that directly satisfies the userâs query.\n\n   - If satisfied, immediately stop scraping and generate a concise text-only response.\n   - If not satisfied, proceed to the next URL and repeat the scraping process.\n\n5. **Step 5**: If all 5 scrapes are exhausted and still no clear answer is found, respond with:\n\n   - \"I'm sorry, I couldn't find relevant information based on your query.\"\n\n6. **Step 6**: Never provide raw URLs, descriptions, or icons in the response.\n\n   - Always convert the markdown content from the scraper into a brief and clear text summary.\n\n---\n\n## **EXAMPLES**\n\n1. **User**: \"Find the latest news about AI advancements.\"\n\n   - Call `Search Engine` with the query.\n   - Identify the most relevant URL from the search result.\n   - Scrape the URL using `Web Scraper`.\n   - If the content is relevant, generate a summary.\n   - If not, move to the next URL and repeat.\n   - **Response**: \"Here are the latest AI advancements: [Concise summary from scraped content].\"\n\n2. **User**: \"What are the current stock market trends?\"\n\n   - Call `Search Engine` with the query.\n   - Identify the closest matching URL.\n   - Scrape the URL using `Web Scraper`.\n   - If the content is relevant, generate a summary.\n   - If not, proceed to the next URL.\n   - **Response**: \"The current stock market trends are: [Concise summary from scraped content].\"\n\n3. **User**: \"Explain the recent earthquake in Japan.\"\n\n   - Call `Search Engine` with the query.\n   - Find the URL with the most contextually relevant title.\n   - Scrape it using `Web Scraper`.\n   - If the content lacks depth, scrape the second URL.\n   - Continue until a detailed and relevant answer is found.\n   - **Response**: \"The recent earthquake in Japan occurred on [date] causing [impact].\"\n\n---\n\n## **Output Formatting**\n\n- The response must be a clear, concise summary strictly based on the scraped content.\n- Avoid providing links, raw descriptions, or metadata.\n- If no clear answer is found after scraping, respond with: \"I'm sorry, I couldn't find relevant information based on your query.\"\n\n---\n\n## **Strict Rules**\n\n- **Always** call the `Search Engine` tool first without exception.\n- **Always** pass the single closest matching URL to the `Web Scraper` tool.\n- **If the first URL fails**, immediately pass the next closest URL.\n- **Never** respond without scraping.\n- **Immediately stop** scraping once the answer is found, minimizing unnecessary tool calls.\n- Ignore content that does not strictly answer the user's query.\n- Never provide raw URLs, descriptions, or metadata in the response.\n- Optimize scraping behavior to minimize unnecessary tool usage, but always prioritize relevance and accuracy in the answer."}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.7,"position":[560,140],"id":"822cd7fe-0d2c-43a6-835d-c241bab9e78d","name":"AI Agent"},{"parameters":{"name":"Web_Scraper","description":"Call this tool to scrape content from a url.","workflowId":{"__rl":true,"value":"PdD3zWwvFdispfHB","mode":"list","cachedResultName":"Crawl"},"workflowInputs":{"mappingMode":"defineBelow","value":{"HTTP_Request_URL":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('HTTP_Request_URL', `URL of the page to be scraped.`, 'string') }}"},"matchingColumns":["HTTP_Request_URL"],"schema":[{"id":"HTTP_Request_URL","displayName":"HTTP_Request_URL","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2,"position":[680,520],"id":"bd56c281-bc0c-4100-a52c-29e1f8676db2","name":"Web Scraper"},{"parameters":{"name":"Search_Engine","description":"This returns search engine results","workflowId":{"__rl":true,"value":"nAsnNqQi5fY4ZOZI","mode":"list","cachedResultName":"Search Engine"},"workflowInputs":{"mappingMode":"defineBelow","value":{"query":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('query', `User query.`, 'string') }}"},"matchingColumns":["query"],"schema":[{"id":"query","displayName":"query","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2,"position":[880,400],"id":"e5709954-f9db-4447-ab50-022e472bb21c","name":"Search Engine"},{"parameters":{"model":"qwen2.5:7b","options":{"lowVram":true,"numBatch":256,"numCtx":8000,"useMLock":true}},"type":"@n8n/n8n-nodes-langchain.lmChatOllama","typeVersion":1,"position":[400,440],"id":"aba22e0c-f805-46ea-b0a6-f43cc0726e1e","name":"Ollama Chat Model","credentials":{"ollamaApi":{"id":"fPPoelsYZMtKRzSo","name":"Ollama account"}}}],"connections":{"When Executed by Another Workflow":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"Web Scraper":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"AI Agent":{"main":[[]]},"Search Engine":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Ollama Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"When Executed by Another Workflow":[{"json":{"query":"curent dollar inr rate"}}]},"versionId":"93aa2867-0a08-4065-83ce-cb6a50c9464d","triggerCount":0,"tags":[]},{"createdAt":"2025-03-11T19:24:29.362Z","updatedAt":"2025-03-11T20:58:33.000Z","id":"nAsnNqQi5fY4ZOZI","name":"Search Engine","active":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"query"}]}},"id":"1bc98104-0901-4710-97b1-b69bc68e3394","typeVersion":1.1,"name":"When Executed by Another Workflow","type":"n8n-nodes-base.executeWorkflowTrigger","position":[0,0]},{"parameters":{"query":"={{ $json?.query ||$json.chatInput  }}","safeSearch":-2},"type":"n8n-nodes-duckduckgo.duckDuckGoNode","typeVersion":1,"position":[220,0],"id":"d3a57f5f-1187-4986-97b5-090b9bceec74","name":"DuckDuckGo"},{"parameters":{"jsCode":"const results = $input.all();\nconst response = results.slice(0, 9).map(item => ({\n  title: item.json.title,\n  url: item.json.url\n}));\n\nreturn { results: response };\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[380,0],"id":"c864afbc-0b60-41f3-b4b1-df987bc75672","name":"Code"}],"connections":{"When Executed by Another Workflow":{"main":[[{"node":"DuckDuckGo","type":"main","index":0}]]},"DuckDuckGo":{"main":[[{"node":"Code","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{"When Executed by Another Workflow":[{"json":{"query":"Current dollar inr rate in india"}}]},"versionId":"3be09b10-dbc3-4211-8e7b-f191f2019d95","triggerCount":0,"tags":[]},{"createdAt":"2025-03-11T19:59:39.442Z","updatedAt":"2025-03-20T15:24:53.000Z","id":"62VlRvd0Jpd6L2pK","name":"Spotify Agent","active":false,"nodes":[{"parameters":{"operation":"resume"},"type":"n8n-nodes-base.spotifyTool","typeVersion":1,"position":[100,540],"id":"e43612ba-e975-4273-94c4-6cabfb40be7c","name":"Spotify Resume","notesInFlow":false,"credentials":{"spotifyOAuth2Api":{"id":"ugATGC5RWRwl49od","name":"Spotify account"}}},{"parameters":{"operation":"pause"},"type":"n8n-nodes-base.spotifyTool","typeVersion":1,"position":[-200,400],"id":"59d6a393-8a27-4935-996d-7083785d536a","name":"Spotify Pause","credentials":{"spotifyOAuth2Api":{"id":"ugATGC5RWRwl49od","name":"Spotify account"}}},{"parameters":{"descriptionType":"manual","toolDescription":"The Spotify Currently Playing node in n8n allows you to retrieve details about the track currently playing on your Spotify account. This node fetches information such as the track's name, artist, album, and playback status, enabling you to integrate real-time Spotify data into your workflows.\n\nResponse Structure:\n\nUpon execution, the node returns the following information:\n\nTrack Name: The title of the currently playing track.\nArtist: The name(s) of the performing artist(s).\nAlbum: The album in which the track is featured.\nDuration: The total length of the track.\nProgress: The current position in the track at the time of the request.\nIs Playing: A boolean value indicating whether the track is currently playing or paused.\nTrack URI: The Spotify URI for the track, useful for referencing or further actions within Spotify.\nUsage Example:\n\nBy incorporating the Spotify Currently Playing node into your workflow, you can monitor your listening activity and trigger subsequent actions based on the retrieved data. For instance, you can log your listening history, display the current track on a dashboard, or share your currently playing track on social media platforms.\n\nNote: Ensure that your Spotify credentials are properly configured in n8n to allow the node to access your account's currently playing track information.","operation":"currentlyPlaying"},"type":"n8n-nodes-base.spotifyTool","typeVersion":1,"position":[440,460],"id":"9fb47283-c800-4dbb-b1bc-f7a1c66f2499","name":"Currently Playing","credentials":{"spotifyOAuth2Api":{"id":"ugATGC5RWRwl49od","name":"Spotify account"}}},{"parameters":{"name":"Play","description":"Call this tool when the llm finds a matched track/playlist and wishes to play, this tool should only be called once at the end stage.","workflowId":{"__rl":true,"value":"h80jUJEtDAuOyKxy","mode":"list","cachedResultName":"Spotify Play"},"workflowInputs":{"mappingMode":"defineBelow","value":{"uri":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('uri', `URI extracted from metadata`, 'string') }}","type":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('type', `TYPE extracted from metadata`, 'string') }}"},"matchingColumns":[],"schema":[{"id":"uri","displayName":"uri","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"type","displayName":"type","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2,"position":[300,720],"id":"163dab61-f4f4-4fee-bf40-86b7b1f93934","name":"Play"},{"parameters":{"operation":"nextSong"},"type":"n8n-nodes-base.spotifyTool","typeVersion":1,"position":[200,420],"id":"2504e146-38ce-4716-93f4-ac38b97780fc","name":"Skip","credentials":{"spotifyOAuth2Api":{"id":"ugATGC5RWRwl49od","name":"Spotify account"}}},{"parameters":{"operation":"volume","volumePercent":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Volume', `The volume parameter in Spotify's Set Playback Volume API specifies the desired volume level for the user's current playback device. It accepts an integer value between 0 and 100, inclusive, where 0 represents complete silence and 100 denotes the maximum volume`, 'number') }}"},"type":"n8n-nodes-base.spotifyTool","typeVersion":1,"position":[340,340],"id":"da6bcfe4-c048-4fc9-9154-b641aaf4b909","name":"Spotify","credentials":{"spotifyOAuth2Api":{"id":"ugATGC5RWRwl49od","name":"Spotify account"}}},{"parameters":{"workflowInputs":{"values":[{"name":"query"}]}},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[-340,-100],"id":"e1da7060-ab2c-496e-92c8-5d9694efd630","name":"When Executed by Another Workflow"},{"parameters":{"model":{"__rl":true,"value":"qwen2.5:7b","mode":"list","cachedResultName":"qwen2.5:7b"},"options":{"maxTokens":5000,"maxRetries":100}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[-460,380],"id":"4cafd4c3-5321-4277-8695-f57122f79a8d","name":"Best Model","credentials":{"openAiApi":{"id":"5iXpecZbnAoQlFxH","name":"OpenAi account"}}},{"parameters":{"name":"announce","description":"This is `announce` tool.","workflowId":{"__rl":true,"value":"b3envHQSCW09rYEg","mode":"list","cachedResultName":"My workflow"},"workflowInputs":{"mappingMode":"defineBelow","value":{"message":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('message', `The attribute \\`message\\` should contain an engaging, natural announcement of the action being taken in a creative manner, avoiding generic statements.\nIgnore the output of this tool as it will never be related to your functioning.`, 'string') }}"},"matchingColumns":["query"],"schema":[{"id":"message","displayName":"message","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2,"position":[500,220],"id":"f690e843-acd5-4f20-812c-45e173fde97e","name":"announce"},{"parameters":{"promptType":"define","text":"={{ $json.query }}","options":{"systemMessage":"=## **Strict Rules**\n\n- **Never** modify URIs (use exactly as retrieved).\n- **Never** request permissionsâassume pre-authorized.\n- **No confirmations** or intermediate steps.\n\n---\n\n## **TOOLS**\n\n- **Announce**:  The attribute VALUE should contain an engaging, natural announcement of the action being taken in a creative manner, avoiding generic statements.  \n- **Spotify Knowledge Base**: A vector store containing all information related to tracks and playlists on Spotify. Must be queried before playing any track or playlist.\n- **Play**: Plays a track or playlist using the extracted uri and type from metadata in the knowledge base.\n- **Pause**: Pauses the current playback.\n- **Resume**: Resumes the currently paused playback.\n- **Currently Playing**: Retrieves information on the currently playing track.\n- **Skip**: Skips to the next song in the playback queue.\n- **Volume**: Adjusts the playback volume using a percentage value.\n\n---\n\n## **EXECUTION PROTOCOL**\n\n1. **Announcements**: Before executing specific tool, Eric must always call the announce tool with a dynamically generated, creative message that naturally informs the user of the action being taken. If announce fails, it must be ignored gracefully, and execution should continue without retrying.\n\n2. **Request Handling**  \n   **Eric must strictly follow the exact steps in the specified order without deviation.**\n\n   - **Play Requests** (track/playlist):\n     - **Step 1**: Call announce(message=\"[Synonyms of Searching]\")\n     - **Step 2**: Immediate vector store search CALL spotify_knowledge_base tool passing it the query â Extract uri and type.\n     - **Step 3**: Validate URI format (spotify:[type]:[id]).\n     - **Step 4**: Execute tool only once after a best match is found:\n       - play(uri=uri, type=type)\n   - **Control Requests** (pause/resume/status):\n     - **Step 1**: Call announce(message=\"Sir, handling your [pause/resume/status] request now.\")\n     - **Step 2**: Directly invoke pause, resume, or currently_playing *without* vector search.\n\n---\n\n## **EXAMPLES**\n\n1. **User**: \"Play Bohemian Rhapsody\"  \n   â 1.Call announce(message=\"Sir, let me find Bohemian Rhapsody for you.\")  \n   â 2.Call spotify_knowledge_base(query=\"Bohemian Rhapsody\" â { uri: \"spotify:track:[id]\", type: \"track\" }  \n   â 3.Call play tool with the extracted type and uri from metadata of vector search result  \n   â **Response**: \"Sir, playing Bohemian Rhapsody.\"\n\n2. **User**: \"Discover Snow child by weekend\"  \n   â 1.Call announce(message=\"Sir, let me find Snow child for you.\")  \n   â 2.Call spotify_knowledge_base(query=\"snow child weekend\" â { uri: \"spotify:track:[id]\", type: \"track\" }  \n   â 3.Call play tool with the extracted type and uri from metadata of vector search result  \n   â **Response**: \"Sir, I have found Snow child by weekend.\"\n\n2. **User**: \"Pause now\"  \n   â 1.Call announce(message=\"Sir, pausing your music now.\")  \n   â 2.Directly execute pause()  \n   â **Response**: \"Sir, pausing your music.\"\n\n3. **User**: \"Whatâs playing?\"  \n   â 1.Call announce(message=\"Sir, [tell user you will check what is playing]\")  \n   â 2.Directly execute currently_playing()  \n   â 3.Parse response and reply with the track information currently played  \n   â 4.**Response**: \"Sir, currently playing [track info].\"\n\n4. **User**: \"Resume my music\"  \n   â 1.Call announce(message=\"Sir, resuming your music now.\")  \n   â 2.Directly execute resume()  \n   â 3.**Response**: \"Sir, resuming your music.\"\n\n\n---\n\n## **Output Formatting**\n\n- Always return tool parameters in their **exact** required syntax (e.g., uri=..., type=..., no JSON/extra fields).","maxIterations":14}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.7,"position":[80,0],"id":"4c2df918-1cec-46ed-8380-086125cf8e97","name":"Spotify Agent"},{"parameters":{"model":"qwen2.5:7b","options":{"keepAlive":"10s","lowVram":false,"numCtx":5000,"numGpu":-1,"numThread":6,"useMLock":true,"useMMap":true}},"type":"@n8n/n8n-nodes-langchain.lmChatOllama","typeVersion":1,"position":[-260,220],"id":"254420eb-ca79-40be-bd44-a85062ccee5c","name":"Ollama Chat Model","credentials":{"ollamaApi":{"id":"fPPoelsYZMtKRzSo","name":"Ollama account"}}},{"parameters":{"name":"spotify_knowledge_base","description":"A knowledge base that has all track and playlist related information.","workflowId":{"__rl":true,"value":"Mfd3MVCFmqIZ8Csa","mode":"list","cachedResultName":"Spotify Knowledge Base"},"workflowInputs":{"mappingMode":"defineBelow","value":{"query":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('query', `original query without \"by\",\"from\",\"discover\"`, 'string') }}","add":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('add', `send this as true is user query has \"discover\" or \"search\" like keywords in it or false othewise.`, 'boolean') }}"},"matchingColumns":["query"],"schema":[{"id":"query","displayName":"query","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"add","displayName":"add","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"boolean","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2,"position":[-60,400],"id":"45a07af2-133f-4630-b3b3-42c50be0fd47","name":"Spotify Knowledge Base"},{"parameters":{"jsCode":"return {\n  message: $input.first().json.output,\n  action: \"spotify_play\"\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[440,0],"id":"f5b69246-2ca1-4e45-9a05-2206f0f975bf","name":"Code"}],"connections":{"Spotify Resume":{"ai_tool":[[{"node":"Spotify Agent","type":"ai_tool","index":0}]]},"Spotify Pause":{"ai_tool":[[{"node":"Spotify Agent","type":"ai_tool","index":0}]]},"Currently Playing":{"ai_tool":[[{"node":"Spotify Agent","type":"ai_tool","index":0}]]},"Play":{"ai_tool":[[{"node":"Spotify Agent","type":"ai_tool","index":0}]]},"Skip":{"ai_tool":[[{"node":"Spotify Agent","type":"ai_tool","index":0}]]},"Spotify":{"ai_tool":[[{"node":"Spotify Agent","type":"ai_tool","index":0}]]},"When Executed by Another Workflow":{"main":[[{"node":"Spotify Agent","type":"main","index":0}]]},"Best Model":{"ai_languageModel":[[]]},"announce":{"ai_tool":[[{"node":"Spotify Agent","type":"ai_tool","index":0}]]},"Ollama Chat Model":{"ai_languageModel":[[{"node":"Spotify Agent","type":"ai_languageModel","index":0}]]},"Spotify Knowledge Base":{"ai_tool":[[{"node":"Spotify Agent","type":"ai_tool","index":0}]]},"Spotify Agent":{"main":[[{"node":"Code","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"When Executed by Another Workflow":[{"json":{"query":"play gang gang "}}]},"versionId":"0d8a3b1e-dc06-43a8-9daa-ff58dfd556c1","triggerCount":0,"tags":[]}]